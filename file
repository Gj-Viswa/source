# Mount Google Drive to access files and folders from google.colab import drive drive.mount('/content/drive')

# Downloads and extracts a dataset from Kaggle to a specific directory in Google Drive # Run this command only once during the initial execution to download the dataset # This command downloads a large dataset (10GB) and stores it in the drive, which may fill up the storage faster
!export KAGGLE_USERNAME=ashikkj&& export KAGGLE_KEY=a00c6b7418ecbb0299d5007cddd7c6ad &&kaggle datasets download antoreepjana/animals-detection-images-dataset --unzip -p
/content/drive/MyDrive/MyAnimalsDataset

# Importing necessary libraries and modules for image processing, deep learning, and visualization
import os import cv2 as cv import glob as gb import numpy as np import pandas as pd
import matplotlib.pyplot as plt from tensorflow.keras.applications.inception_v3 import InceptionV3 from tensorflow.keras
import Model, layers, Sequential, optimizers from tensorflow.keras.callbacks import ModelCheckpoint from tensorflow
import keras from tensorflow.keras import callbacks, layers, Model
import cv2 import matplotlib.pyplot as plt import matplotlib.image as mpimg
import re

# Setting the directories for the training and testing datasets train_dir= '/content/drive/MyDrive/MyAnimalsDataset/train' test_dir= '/content/drive/MyDrive/MyAnimalsDataset/test'

# Calculating and displaying the sample sizes of different animal categories in the training dataset and visualizing the distribution
train_image_bear = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Bear"))-1 train_image_bull = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Bull"))-1 train_image_cheetah = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Cheetah"))-1 train_image_crocodile = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Crocodile"))-1 train_image_elephant = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Elephant"))-1 train_image_jaguar = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Jaguar"))-1 train_image_leopard = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Leopard"))-1 train_image_lion = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Lion"))-1 train_image_rhinoceros = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Rhinoceros"))-1 train_image_tiger = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/train/Tiger"))-1 print("Bear sample size : ",train_image_bear,"\n")

print("Bull sample size : ",train_image_bull,"\n") print("Cheetah sample size : ",train_image_cheetah,"\n") print("Crocodile sample size : ",train_image_crocodile,"\n") print("Elephant sample size : ",train_image_elephant,"\n") print("Jaguar sample size : ",train_image_jaguar,"\n") print("Leopard sample size : ",train_image_leopard,"\n") print("Lion sample size : ",train_image_lion,"\n") print("Rhinoceros sample size : ",train_image_rhinoceros,"\n") print("Tiger sample size : ",train_image_tiger,"\n") training_data_size =
train_image_bear+train_image_bull+train_image_cheetah+train_image_crocodile+train_imag e_elephant+train_image_jaguar+train_image_leopard+train_image_lion+train_image_rhinoce ros+train_image_tiger
occurences = [train_image_bear/training_data_size ,train_image_bull/training_data_size
,train_image_cheetah/training_data_size ,train_image_crocodile/training_data_size
,train_image_elephant/training_data_size
,train_image_jaguar/training_data_size,train_image_leopard/training_data_size,train_im age_lion/training_data_size,train_image_rhinoceros/training_data_size,train_image_tige r/training_data_size]
print("training data size :",training_data_size)
fig = plt.figure(figsize=[20,10]) ax = fig.add_axes([0,0,1,1]) ax.bar(["Bear","Bull","Cheetah","Crocodile","Elephant","Jaguar","Leopard","Lion","Rhin oceros","Tiger"],occurences)



# Calculating and displaying the sample sizes of different animal categories in the testing dataset and visualizing the distribution
test_image_bear = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Bear"))-1 test_image_bull = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Bull"))-1 test_image_cheetah = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Cheetah"))-1 test_image_crocodile = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Crocodile"))-1 test_image_elephant = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Elephant"))-1 test_image_jaguar = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Jaguar"))-1 test_image_leopard = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Leopard"))-1 test_image_lion = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Lion"))-1 test_image_rhinoceros = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Rhinoceros"))-1 test_image_tiger = len(os.listdir("/content/drive/MyDrive/MyAnimalsDataset/test/Tiger"))-1 print("Bear sample size : ",test_image_bear,"\n")
print("Bull sample size : ",test_image_bull,"\n") print("Cheetah sample size : ",test_image_cheetah,"\n") print("Crocodile sample size : ",test_image_crocodile,"\n") print("Elephant sample size : ",test_image_elephant,"\n") print("Jaguar sample size : ",test_image_jaguar,"\n") print("Leopard sample size : ",test_image_leopard,"\n") print("Lion sample size : ",test_image_lion,"\n") print("Rhinoceros sample size : ",test_image_rhinoceros,"\n") print("Tiger sample size : ",test_image_tiger,"\n") validation_data_size =
test_image_bear+test_image_bull+test_image_cheetah+test_image_crocodile+test_image_elephant+test
_image_jaguar+test_image_leopard+test_image_lion+test_image_rhinoceros+test_image_tiger occurences = [test_image_bear/validation_data_size ,test_image_bull/validation_data_size
,test_image_cheetah/validation_data_size ,test_image_crocodile/validation_data_size
,test_image_elephant/validation_data_size
,test_image_jaguar/validation_data_size,test_image_leopard/validation_data_size,test_image_lion/ validation_data_size,test_image_rhinoceros/validation_data_size,test_image_tiger/validation_data
_size]
print("validation data size:",validation_data_size)
fig = plt.figure(figsize=[20,10]) ax = fig.add_axes([0,0,1,1]) ax.bar(["Bear","Bull","Cheetah","Crocodile","Elephant","Jaguar","Leopard","Lion","Rhinoceros","T iger"],occurences)



import cv2

# Function to detect animals in video frames
def detect_animals(frame):
    # Preprocess frame (e.g., resize, convert to grayscale)
    # You can add more preprocessing steps as needed

    # Load pre-trained YOLOv5 model for object detection
    net = cv2.dnn.readNet("yolov5.weights", "yolov5.cfg")
    classes = []
    with open("coco.names", "r") as f:
        classes = f.read().splitlines()

    # Set input blob
    blob = cv2.dnn.blobFromImage(frame, 1/255.0, (416, 416), swapRB=True, crop=False)
net.setInput(blob)

    # Forward pass through network
    outputs = net.forward()

    # Process detections
    for output in outputs:
        for detection in output:
            scores = detection[5:]
class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:  # Minimum confidence threshold
                # Get object coordinates
center_x = int(detection[0] * frame.shape[1])
center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])

                # Draw bounding box around detected object
                cv2.rectangle(frame, (center_x - w//2, center_y - h//2), (center_x + w//2, center_y + h//2), (0, 255, 0), 2)
                cv2.putText(frame, f"{classes[class_id].upper()} {confidence*100:.2f}%", (center_x, center_y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    return frame

# Main function
def main():
    # Initialize video capture from webcam (change 0 to video file path for file input)
    cap = cv2.VideoCapture(0)

    while True:
        # Read frame from video stream
        ret, frame = cap.read()
        if not ret:
            break

        # Detect animals in frame
detected_frame = detect_animals(frame)

        # Display frame with detected animals
        cv2.imshow("Animal Detection", detected_frame)

        # Check for key press to exit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release video capture and close OpenCV windows
cap.release()
    cv2.destroyAllWindows()

if _name_ == "_main_":
main()
